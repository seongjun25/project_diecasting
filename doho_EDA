import requests
import numpy as np
import pandas as pd
import geopandas as gpd
import time
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from rapidfuzz import fuzz
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from folium import Map, CircleMarker, LayerControl, FeatureGroup
import folium
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
import pandas as pd, re, unicodedata
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.impute import KNNImputer
import scipy.stats as stats
from sklearn.ensemble import RandomForestClassifier
import scikit_posthocs as sp
from sklearn.metrics import precision_recall_curve, f1_score
from sklearn.preprocessing import RobustScaler
import optuna
from sklearn.model_selection import StratifiedKFold, cross_val_predict
from sklearn.metrics import precision_recall_curve, f1_score, classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.inspection import PartialDependenceDisplay
import shap
import joblib

df = pd.read_excel("data/train.xlsx")


df.columns
df.info()
df.describe()

df.columns
df.hist()

df.isna().sum() # molten_volume과 heating_furnace에 약 50% 결측치 존재

df['passorfail'].value_counts(normalize=True) # 불량률 약 5%로 불균형 존재
sns.countplot(x="passorfail", data=df)
plt.title("Pass vs Fail Distribution")
plt.show()


# 상관관계 확인
numeric_df = df.select_dtypes(include=["float64", "int64"])

# 상관계수 계산
corr = numeric_df.corr()

# 히트맵 그리기 (숫자 포함)
plt.figure(figsize=(12,8))
sns.heatmap(
    corr, 
    cmap="coolwarm", 
    center=0, 
    annot=True,        # 각 칸에 숫자 표시
    fmt=".2f",         # 소수점 2자리까지 표시
    cbar=True
)
plt.title("Correlation Heatmap with Values")
plt.show()
# cast_pressure가 target과 상관계수 높음


df['low_section_speed'].hist()
df['high_section_speed'].hist()
df['EMS_operation_time'].hist()
df.columns

# 주요 변수 불량/정상 비교
key_features = [
    "molten_temp", "cast_pressure", "low_section_speed", "high_section_speed",
    "molten_volume", "biscuit_thickness", "sleeve_temperature",
    "upper_mold_temp1", "lower_mold_temp1", "Coolant_temperature"
]

for col in key_features:
    if col in df.columns:
        # sharey=False → Pass, Fail 각각 다른 y축 사용
        fig, axes = plt.subplots(1, 2, figsize=(12,4), sharey=False)

        # Pass (0) KDE
        sns.kdeplot(
            df[df['passorfail']==0][col].dropna(),
            ax=axes[0], color="blue", fill=True
        )
        axes[0].set_title(f"{col} - Pass (0)")

        # Fail (1) KDE
        sns.kdeplot(
            df[df['passorfail']==1][col].dropna(),
            ax=axes[1], color="red", fill=True
        )
        axes[1].set_title(f"{col} - Fail (1)")

        plt.suptitle(f"{col} KDE Distribution by Pass/Fail", fontsize=14)
        plt.tight_layout()
        plt.show()


# 시계열
df["datetime"] = pd.to_datetime(df["registration_time"])
df["hour"] = df["datetime"].dt.hour       # 시간대 (0~23)
df["day"] = df["datetime"].dt.date
df["weekday"] = df["datetime"].dt.day_name()  # 요일

df=df.drop(columns=['datetime'])
df.info()


df['hour'].hist()
df['weekday'].hist()


fail_rate_daily = df.groupby("day")["passorfail"].mean()
fail_rate_daily.sort_values(ascending=False)

plt.figure(figsize=(12,4))
fail_rate_daily.plot(marker="o")
plt.title("Daily Fail Rate")
plt.ylabel("Fail Rate")
plt.xlabel("Date")
plt.show()
# 2019.02.17에 불량률 높음

fail_rate_hour = df.groupby("hour")["passorfail"].mean()

plt.figure(figsize=(10,4))
fail_rate_hour.plot(kind="bar", color="orange")
plt.title("Fail Rate by Hour of Day")
plt.ylabel("Fail Rate")
plt.xlabel("Hour")
plt.show()
# 특정 시간대에 불량률이 높음 07시 19시?


fail_rate_weekday = df.groupby("weekday")["passorfail"].mean().reindex(
    ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
)

plt.figure(figsize=(8,4))
fail_rate_weekday.plot(kind="bar", color="green")
plt.title("Fail Rate by Weekday")
plt.ylabel("Fail Rate")
plt.xlabel("Weekday")
plt.show()
# 일요일이 약간 높긴 함


plt.figure(figsize=(15,5))

sns.scatterplot(
    data=df,
    x="datetime",
    y="passorfail",    # ✔ 문자열로!
    hue="passorfail", 
    palette={0:"blue", 1:"red"},
    s=10,              # 점 크기
    alpha=0.7          # 투명도
)

plt.title("Pass/Fail over Time")
plt.xlabel("DateTime")
plt.ylabel("Pass/Fail (0=Pass, 1=Fail)")
plt.show()

# =================================================================


fails = df["passorfail"].values
runs = []
count = 0

for val in fails:
    if val == 1:
        count += 1
    else:
        if count > 0:
            runs.append(count)
        count = 0
if count > 0:
    runs.append(count)

print("연속 불량 run 개수:", len(runs))
print("평균 run 길이:", np.mean(runs))
print("최대 run 길이:", np.max(runs))


plt.figure(figsize=(15,4))
plt.plot(df["datetime"], df["passorfail"], color="gray", alpha=0.3, label="Pass/Fail")

# 불량 구간만 빨강 점으로 표시
fail_idx = df[df["passorfail"]==1].index
plt.scatter(df.loc[fail_idx, "datetime"], df.loc[fail_idx, "passorfail"],
            color="red", s=10, label="Fail")

plt.title("Fail Runs over Time")
plt.ylabel("Pass=0 / Fail=1")
plt.xlabel("Datetime")
plt.legend()
plt.show()

# 수치형 컬럼만 추출
num_cols = df.select_dtypes(include=["int64","float64"]).columns

# mold_code별 평균
mold_mean = df.groupby("mold_code")[num_cols].mean()

print(mold_mean.head())

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,6))
sns.heatmap(mold_mean, cmap="coolwarm", annot=False)
plt.title("Average values per mold_code")
plt.show()

# =======================================================
df = pd.read_excel("data/train.xlsx")
df.describe()

df = df.drop(columns=['id','line','name','mold_name','emergency_stop','tryshot_signal','time','date'])

df[df['working'].isna()]
df=df.drop(index=19327)

df.isna().sum()
df.columns
df.info()



df["datetime"] = pd.to_datetime(df["registration_time"])
df["hour"] = df["datetime"].dt.hour       # 시간대 (0~23)
df["day"] = df["datetime"].dt.date
df["weekday"] = df["datetime"].dt.day_name()  # 요일

df=df.drop(columns=['registration_time'])

# molten_temp 결측치 2261개 약 3%
df['molten_temp'].hist()
df[df['molten_temp'] >= 600]['molten_temp'].hist()
df[df['molten_temp'] < 600]['molten_temp'].hist()
df[df['molten_temp'] < 600]['molten_temp'].unique()

df[df['molten_temp'] < 600]['molten_temp'].value_counts()

# 대부분 600후반에서 700초반으로 분포
# 100언더 있는데 뭐지 > 값이 이상하긴 한데 불량이랑 관련있는 것 같진 않음
# 7 , 70 ,71 , 72 이런 값 있는데 이런건 700 얼마인데 뒤에 짤린 거 같긴함 , 0은? 그냥 결측으로 판단하는게?

# mold별로 차이가 있는지

df.groupby('mold_code')['molten_temp'].mean() 

plt.figure(figsize=(14,6))
sns.boxplot(
    data=df[df['upper_mold_temp2']<1000],
    x="mold_code",
    y="upper_mold_temp2"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("Molten Temperature Distribution by Mold Code")
plt.show()

# 8600번 몰드만 다르게 분포되어있음
# 나머지 이상치가 많긴한데 불량이랑 상관없는 것 같음

df[(df['molten_temp'] >= 600) & (df['molten_temp'] < 700) ]['passorfail'].sum() 
df[(df['molten_temp'] >= 600) & (df['molten_temp'] < 670) ]['passorfail'].sum()
df[(df['molten_temp'] < 600)]['passorfail'].sum()



df.groupby('mold_code')['molten_temp'].median()

# facility_operation_cycleTime

df.groupby('mold_code')['facility_operation_cycleTime'].mean()
df.groupby('mold_code')['facility_operation_cycleTime'].median()

plt.figure(figsize=(14,6))
sns.boxplot(
    data=df,
    x="mold_code",
    y="facility_operation_cycleTime"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("facility_operation_cycleTime by Mold Code")
plt.show()

df['physical_strength']
df.columns

# production_cycletime

df.groupby('mold_code')['production_cycletime'].mean()
df.groupby('mold_code')['production_cycletime'].median()

plt.figure(figsize=(14,6))
sns.boxplot(
    data=df,
    x="mold_code",
    y="production_cycletime"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("production_cycletime by Mold Code")
plt.show()

# Production cycletime 변수 값이 0 인거 대부분은 불량

# low_section_speed
df['low_section_speed'].idxmax()
df[df['low_section_speed']==65535]

df = df.drop(index=46546)
df['low_section_speed'].sort_values(ascending=False)

df.groupby('mold_code')['low_section_speed'].mean()
df.groupby('mold_code')['low_section_speed'].median()


df = pd.read_excel("data/train.xlsx")
df = df[['mold_code','molten_temp']]
df = df.dropna()

# 2) 그룹 나누기
groups = [group['molten_temp'].values for name, group in df.groupby('mold_code')]

# 3) Kruskal-Wallis 검정
stat, p = stats.kruskal(*groups)

print("Kruskal-Wallis H 통계량:", stat)
print("p-value:", p)

# 4) 효과 크기 (Epsilon-squared)
k = len(groups)              # 그룹 수
n = sum(len(g) for g in groups)  # 전체 샘플 수
epsilon_sq = (stat - k + 1) / (n - k)
print("Epsilon-squared:", epsilon_sq)

# 5) 해석
if p < 0.05:
    print("⇒ 귀무가설 기각: 몰드 그룹 간 분포 차이가 유의하다.")

    # 6) 사후분석 (Dunn’s test with Bonferroni correction)
    print("\n사후분석 (Dunn’s test) 실행")
    posthoc = sp.posthoc_dunn(df, val_col='facility_operation_cycleTime',
                              group_col='mold_code', p_adjust='bonferroni')
    print(posthoc)
else:
    print("⇒ 귀무가설 채택: 몰드 그룹 간 분포 차이가 유의하지 않다.")

df = pd.read_excel("data/train.xlsx")
df = df[df['passorfail'] == 0] # 정상만 필터

plt.figure(figsize=(14,6))
sns.boxplot(
    data=df[df['upper_mold_temp2']<1000],
    x="mold_code",
    y="upper_mold_temp2"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("Molten Temperature Distribution by Mold Code")
plt.show()

plt.figure(figsize=(14,6))
sns.boxplot(
    data=df[(df['low_section_speed'] >= 75) & (df['low_section_speed'] <= 125)],
    x="mold_code",
    y="low_section_speed"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("low_section_speed by Mold Code")
plt.show()

df['low_section_speed'].hist()


df.columns
df['facility_operation_cycleTime'].hist(bins=50)
plt.xlim(50, 250)   # x축 범위를 0~500으로 제한
plt.show()

df.groupby('mold_code')['facility_operation_cycleTime'].mean()

df = df.drop(index=46546)

key_features = [
    "molten_temp", "facility_operation_cycleTime", 'production_CycleTime', 'low_section_speed'
]

for col in key_features:
    if col in df.columns:
        # sharey=False → Pass, Fail 각각 다른 y축 사용
        fig, axes = plt.subplots(1, 2, figsize=(12,4), sharey=False)

        # Pass (0) KDE
        sns.kdeplot(
            df[df['passorfail']==0][col].dropna(),
            ax=axes[0], color="blue", fill=True
        )
        axes[0].set_title(f"{col} - Pass (0)")

        # Fail (1) KDE
        sns.kdeplot(
            df[df['passorfail']==1][col].dropna(),
            ax=axes[1], color="red", fill=True
        )
        axes[1].set_title(f"{col} - Fail (1)")

        plt.suptitle(f"{col} KDE Distribution by Pass/Fail", fontsize=14)
        plt.tight_layout()
        plt.show()


plt.figure(figsize=(14,6))
sns.boxplot(
    data=df[df['molten_temp']>600],
    x="mold_code",
    y="molten_temp"
)
plt.xticks(rotation=45)   # mold_code 라벨 겹치면 회전
plt.title("Molten Temperature Distribution by Mold Code")
plt.show()

df[(df['mold_code'] ==8600) & (df['molten_temp'] > 600)]['molten_temp'].hist()

palette = sns.color_palette("tab10", n_colors=df['mold_code'].nunique())

fig, axes = plt.subplots(3, 1, figsize=(14,10), sharex=True)

# Molten Temp
sns.lineplot(ax=axes[0], x="registration_time", y="molten_temp", hue="mold_code",
             data=df, alpha=0.7, palette=palette)
axes[0].set_title("Molten Temperature by mold_code")

# Facility Operation Cycle Time
sns.lineplot(ax=axes[1], x="registration_time", y="molten_volume", hue="mold_code",
             data=df, alpha=0.7, palette=palette)
axes[1].set_title("Facility Operation Cycle Time by mold_code")

# Production Cycle Time
sns.lineplot(ax=axes[2], x="registration_time", y="production_cycletime", hue="mold_code",
             data=df, alpha=0.7, palette=palette)
axes[2].set_title("Production Cycle Time by mold_code")

plt.tight_layout()
plt.show()
